{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO4wW8Kyv+8RWINOtB/W+X4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qcv9DZcvi9SM","executionInfo":{"status":"ok","timestamp":1680896854544,"user_tz":420,"elapsed":7163,"user":{"displayName":"Zuy Pham","userId":"09164064006818555983"}},"outputId":"6feda11e-56f6-4ab7-bc21-7ece4c017701"},"outputs":[{"output_type":"stream","name":"stdout","text":["/usr/local/lib/python3.9/dist-packages/gdown/cli.py:121: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n","  warnings.warn(\n","Downloading...\n","From: https://drive.google.com/uc?id=1MmbDDt0CUqyaPnV-P7rC9SI8EUY91pLO\n","To: /content/abcdef5.zip\n","100% 276k/276k [00:00<00:00, 56.9MB/s]\n","Archive:  abcdef5.zip\n","   creating: abcdef5/\n","  inflating: abcdef5/1vfxw0.jpg      \n","  inflating: __MACOSX/abcdef5/._1vfxw0.jpg  \n","  inflating: abcdef5/1uzz3j_imgur_NVDB9Yw.jpg  \n","  inflating: __MACOSX/abcdef5/._1uzz3j_imgur_NVDB9Yw.jpg  \n","  inflating: abcdef5/1v9lxk_imgur_7eqlxPF.jpg  \n","  inflating: __MACOSX/abcdef5/._1v9lxk_imgur_7eqlxPF.jpg  \n","  inflating: abcdef5/1.jpg           \n","  inflating: __MACOSX/abcdef5/._1.jpg  \n","  inflating: abcdef5/1v3vhq.jpg      \n","  inflating: __MACOSX/abcdef5/._1v3vhq.jpg  \n","Cloning into 'alpla-watermark-removal'...\n","remote: Enumerating objects: 153, done.\u001b[K\n","remote: Counting objects: 100% (32/32), done.\u001b[K\n","remote: Compressing objects: 100% (20/20), done.\u001b[K\n","remote: Total 153 (delta 13), reused 24 (delta 12), pack-reused 121\u001b[K\n","Receiving objects: 100% (153/153), 41.74 MiB | 10.53 MiB/s, done.\n","Resolving deltas: 100% (61/61), done.\n"]}],"source":["# https://drive.google.com/file/d/1MmbDDt0CUqyaPnV-P7rC9SI8EUY91pLO/view?usp=share_link\n","!gdown --id 1MmbDDt0CUqyaPnV-P7rC9SI8EUY91pLO\n","!unzip abcdef5.zip\n","!git clone https://github.com/sweihub/alpla-watermark-removal.git"]},{"cell_type":"code","source":["!mv alpla-watermark-removal alpla\n","!ls\n","!rm alpla/src/__init__.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cy8pkQxYpUbI","executionInfo":{"status":"ok","timestamp":1680896871376,"user_tz":420,"elapsed":614,"user":{"displayName":"Zuy Pham","userId":"09164064006818555983"}},"outputId":"7b4944a2-9865-4b6b-ab72-79ab0689c4ac"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["abcdef5  abcdef5.zip  alpla  __MACOSX  sample_data\n"]}]},{"cell_type":"code","source":["#!python3\n","# --encoding: utf8 --\n","# import importlib\n","# mod = importlib.import_module(\"alpla.src\")\n","from alpla.src import closed_form_matting, estimate_watermark, preprocess, tensorflow_experiments, watermark_reconstruct\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# make sure all the images must be same size\n","folder = \"alpla/images/fotolia\"\n","# folder = \"abcdef5\"\n","gx, gy, gxlist, gylist = estimate_watermark.estimate_watermark(folder)\n","\n","# est = poisson_reconstruct(gx, gy, np.zeros(gx.shape)[:,:,0])\n","cropped_gx, cropped_gy = estimate_watermark.crop_watermark(gx, gy)\n","W_m = estimate_watermark.poisson_reconstruct(cropped_gx, cropped_gy)\n","\n","# random photo\n","sample = \"alpla/images/fotolia/fotolia_137840668.jpg\"\n","# sample = \"abcdef5/1uzz3j_imgur_NVDB9Yw.jpg\"\n","img = cv2.imread(sample)\n","\n","# TODO: images size must be same\n","# img = cv2.resize(img, (512,768), interpolation = cv2.INTER_AREA)\n","im, start, end = estimate_watermark.watermark_detector(img, cropped_gx, cropped_gy)\n","\n","#View the watermark detection\n","print(\"start: %s, end: %s\\n\" % (start, end))\n","plt.imshow(im)\n","plt.show()\n","\n","# We are done with watermark estimation\n","# W_m is the cropped watermark\n","num_images = len(gxlist)\n","\n","# assume the wartermarks with the same size and  position\n","J, img_paths = watermark_reconstruct.get_cropped_images(folder, num_images, start, end, cropped_gx.shape)\n","\n","# Wm = (255*PlotImage(W_m))\n","Wm = W_m - W_m.min()\n","\n","# get threshold of W_m for alpha matte estimate\n","alph_est = watermark_reconstruct.estimate_normalized_alpha(J, Wm, len(J))\n","alph = np.stack([alph_est, alph_est, alph_est], axis=2)\n","C, est_Ik = watermark_reconstruct.estimate_blend_factor(J, Wm, alph)\n","\n","alpha = alph.copy()\n","for i in range(3):\n","\talpha[:,:,i] = C[i]*alpha[:,:,i]\n","\n","Wm = Wm + alpha*est_Ik\n","\n","W = Wm.copy()\n","for i in range(3):\n","\tW[:,:,i]/=C[i]\n","\n","# now we have the values of alpha, Wm, J\n","print(\"Solve for all images...\")\n","Wk, Ik, W, alpha1 = watermark_reconstruct.solve_images(J, W_m, alpha, W)\n","\n","print(\"TODO: patch the image with inpainted area. ;-)\")\n","cv2.imwrite(\"inpainted.jpg\", Ik[0])\n","\n","#W_m_threshold = (255*PlotImage(np.average(W_m, axis=2))).astype(np.uint8)\n","#ret, thr = cv2.threshold(W_m_threshold, 127, 255, cv2.THRESH_BINARY)  \n","\n","print(\"done!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1CXu3sWIfDFy7psg1UAqpcXH7kByaGvfn"},"id":"1YNPb_T2jAvP","outputId":"b3948987-cfd4-41a5-bd2d-941bd10b55d8","executionInfo":{"status":"ok","timestamp":1680898824434,"user_tz":420,"elapsed":1624401,"user":{"displayName":"Zuy Pham","userId":"09164064006818555983"}}},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}